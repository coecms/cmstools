#!/usr/bin/env python
# coding: utf-8

"""gfdstat: nqstat replacement for GFD and CoE Oceans group
Contact: Marshall Ward <marshall.ward@anu.edu.au>
"""


import argparse
from collections import defaultdict
import os
import shlex
import subprocess
import sys

#---
def pbs_env_init():

    # Initialise against PBS_CONF_FILE
    if sys.platform == 'win32':
        pbs_conf_fpath = 'C:\Program Files\PBS Pro\pbs.conf'
    else:
        pbs_conf_fpath = '/etc/pbs.conf'
    os.environ['PBS_CONF_FILE'] = pbs_conf_fpath

    try:
        with open(pbs_conf_fpath) as pbs_conf:
            for line in pbs_conf:
                try:
                    key, value = line.split('=')
                    os.environ[key] = value.rstrip()
                except ValueError:
                    pass
    except IOError as ec:
        print('Unable to find PBS_CONF_FILE ... ' + pbs_conf_fpath)
        sys.exit(1)


#---
def wt_secs(walltime):
    return float(sum(int(t) * 60 ** i
               for i, t in enumerate(reversed(walltime.split(':')))))


#---
def sizeof_h(size):

    units = ['kb', 'mb', 'gb', 'tb', 'pb', 'eb', 'zb', 'yb']
    nbytes = {u: 2**(10*i) for i, u  in enumerate(units, start=1)}

    # Convert to bytes
    if type(size) == str:
        # TODO: This is retarded, is there a better way?
        num =  int(''.join([s for s in size if s.isdigit()]))
        suffix = ''.join([s for s in size if not s.isdigit()])

        if suffix:
            num *=nbytes[suffix]

    elif type(size) == int:
        num = size

    else:
        print('nqstat: error: Unknown memory size')
        sys.exit(1)

    # ... and back again
    for u in ['', 'kib', 'Mib', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']:
        if num < 2**10:
            return '{:3}{}'.format(num, u)
        num /= 2**10


#---
def get_qstat_info(qflag, header, projects=None, users=None):

    qstat = os.path.join(os.environ['PBS_EXEC'], 'bin', 'qstat')
    cmd = '{} {}'.format(qstat, qflag)

    cmd = shlex.split(cmd)
    output = subprocess.check_output(cmd)

    entries = (e for e in output.split('{}: '.format(header)) if e)

    # Immediately remove any non-project entries
    if projects or users:
        entries = (e for e in entries
                   if any('project = {}'.format(p) in e for p in projects)
                   or any('Job_Owner = {}'.format(u) in e for u in users))

    attribs = ((k.split('.')[0], v.replace('\n\t', '').split('\n'))
                for k, v in (e.split('\n', 1) for e in entries))

    status = {k: dict((kk.strip(), vv.strip())
                        for kk, vv in (att.split('=', 1) for att in v if att))
                        for k, v in attribs}

    return status


#---
def display_jobs(queues, jobs, jobwidth, show_priority=False):

    headers = ['Job', '', 'User', 'Project', '', '%CPU', 'WallTime',
                'Time Lim', 'vmem', 'mem', 'memlim', 'cpus']

    if show_priority:
        headers.append('Priority')

    q_jobinfo = defaultdict(list)
    for qname, qstat in queues.iteritems():

        status = (('open' if qstat['enabled'] else 'closed')
                + ('&run' if qstat['started'] else ''))

        qjobs = {j: jobs[j] for j in jobs if jobs[j]['queue'] == qname}

        for j in qjobs:
            # TODO: Make a columns dict and iterate
            jstate = [j,
                      jobs[j]['job_state'],
                      jobs[j]['Job_Owner'],
                      jobs[j]['project'],
                      jobs[j]['Job_Name'][:jobwidth],
                      jobs[j]['av_cpu_util'],
                      jobs[j]['resources_used.walltime'],
                      jobs[j]['Resource_List.walltime'],
                      jobs[j]['resources_used.vmem'],
                      jobs[j]['resources_used.mem'],
                      jobs[j]['Resource_List.mem'],
                      jobs[j]['Resource_List.ncpus']
                     ]

            if show_priority:
                jstate.append(jobs[j]['Resource_List.jobprio'])

            q_jobinfo[qname].append(jstate)

    # Formatting
    col_widths = [len(h) for h in headers]

    for qname, j_info in q_jobinfo.iteritems():

        cols = zip(*j_info)
        j_colwidths = [max(len(str(v)) for v in col) for col in cols]

        # Amend for titles
        col_widths = [max(c1, c2) for c1, c2 in zip(j_colwidths, col_widths)]

    # Now display the output
    log_format = ' '.join('{{:>{}}}'.format(w) for w in col_widths)
    print('')
    print(log_format.format(*headers))

    for qname, j_info in q_jobinfo.iteritems():

        print('')

        qheader = '{} {} '.format(qname, status)
        hlen = sum(col_widths) + len(headers)
        print(qheader + '=' * max(hlen - len(qheader), 0))

        log_format = ' '.join('{{:>{}}}'.format(w) for w in col_widths)

        for j in sorted(j_info, key=lambda x: (x[3], -ord(x[1]))):
            print(log_format.format(*j))

        qjobs = {j: jobs[j] for j in jobs if jobs[j]['queue'] == qname}
        print('')
        print(queue_summary(qname, qjobs))


#---
def queue_summary(queue, jobs):

    n_r = sum(jobs[j]['job_state'] == 'R' for j in jobs)
    n_r_cpus = sum(jobs[j]['Resource_List.ncpus'] for j in jobs
                    if jobs[j]['job_state'] == 'R')

    n_s = sum(jobs[j]['job_state'] == 'S' for j in jobs)
    n_s_cpus = sum(jobs[j]['Resource_List.ncpus'] for j in jobs
                    if jobs[j]['job_state'] == 'S')

    n_q = sum(jobs[j]['job_state'] in ('Q', 'H') for j in jobs)
    n_q_cpus = sum(jobs[j]['Resource_List.ncpus'] for j in jobs
                    if jobs[j]['job_state'] in ('Q', 'H'))

    running_log = '{} running jobs ({} CPUs)'.format(n_r, n_r_cpus)
    suspended_log = '{} suspended jobs ({} CPUs)'.format(n_s, n_s_cpus)
    queued_log = '{} queued jobs ({} CPUs)'.format(n_q, n_q_cpus)

    output = ', '.join([running_log, suspended_log, queued_log])

    return output


#---
def nqstat(projects, users, queues, show_all, show_priority, jobwidth):
    # TODO: show_all is not implemented

    # Default input
    if not projects:
        try:
            projects = [os.environ['PROJECT']]
        except KeyError:
            pass

    if not users:
        try:
            users = [os.environ['USER']]
        except KeyError:
            pass

    # Ignore all this if `show_all` is enabled
    if show_all:
        projects, users = None, None

    # Fetch qstat data
    qdata = get_qstat_info('-Qf', 'Queue')

    # Filter queues
    if queues:
        qdata = {q: qdata[q] for q in qdata if q in queues}

    for q in qdata:
        for key, value in qdata[q].iteritems():

            if value.isdigit():
                qdata[q][key] = int(value)
            elif value.lower() == 'true':
                qdata[q][key] = True
            elif value.lower() == 'false':
                qdata[q][key] = False

    # Fetch job data
    jobs = get_qstat_info('-ft', 'Job Id', projects, users)

    for j in jobs:

        # Convert digit strings to integers
        # TODO: This is too brutal; need a shortlist
        for key, value in jobs[j].iteritems():
            if value.isdigit():
                jobs[j][key] = int(value)

        # "Fix" the jobtitles
        jobs[j]['Job_Name'] = str(jobs[j]['Job_Name'])

        # Trim owner name
        username = jobs[j]['Job_Owner'].split('@')[0]
        jobs[j]['Job_Owner'] = username

        # Pretty-print memory entries
        att_walltime = 'resources_used.walltime'
        jobs[j][att_walltime] = jobs[j].get(att_walltime, '')

        mem_attribs = ('resources_used.vmem',
                       'resources_used.mem',
                       'Resource_List.mem')

        for attrib in mem_attribs:
            jobs[j][attrib] = sizeof_h(jobs[j].get(attrib, 0))

        # Calculate effective CPU usage
        try:
            av_cpu_util = int(wt_secs(jobs[j]['resources_used.cput']) /
                            (wt_secs(jobs[j]['resources_used.walltime'])
                             * jobs[j]['resources_used.ncpus']) * 100)
        except:
            av_cpu_util = 0
        jobs[j]['av_cpu_util'] = av_cpu_util

    # Display processed results
    display_jobs(qdata, jobs, jobwidth, show_priority)


def nqstat_parse():
    parser = argparse.ArgumentParser()

    parser.add_argument('-P', '--project')
    parser.add_argument('-u', '--user')
    parser.add_argument('-w', '--jobwidth', default=8)
    parser.add_argument('-a', '--all',
                        action='store_true',
                        dest='show_all')
    parser.add_argument('-p', '--priority',
                        action='store_true',
                        dest='show_priority')
    parser.add_argument('queues',
                        nargs='*')

    args = parser.parse_args()

    # Low-level parsing
    projects = args.project.split(',') if args.project else None
    users = args.user.split(',') if args.user else None

    return projects, users, args.queues, args.show_all, args.show_priority, args.jobwidth


if __name__ == '__main__':

    pbs_env_init()
    args = nqstat_parse()
    nqstat(*args)
