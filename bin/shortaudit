#!/usr/bin/env python
# coding: utf-8
"""
Check that files in /short follow the current permissions policy
Contact: Marshall Ward <marshall.ward@gmail.com>
"""

# Standard Library
import argparse
from collections import defaultdict
import errno
import grp
import os
import pwd
import stat
import sys

# Extensions
import yaml

shortpath = '/short'
scriptname = 'shortaudit'

# Initialize disk usage logs
user_disk_usage = defaultdict(int)
group_disk_usage = defaultdict(int)
hardlink_inodes = set()

# Permission policy
# Format: (Enable/Disable bit, Flag Mask, Log Message)
f_policy = [(True, stat.S_IRGRP | stat.S_IRGRP, 'enable group access (g+rx)'),
            (False, stat.S_IWOTH, 'disable public write access (o-w)')]

d_policy = f_policy + [(True, stat.S_ISGID, 'enable setgid (g+s)')]


#---
# TODO: Break this up into smaller functions
def shortaudit(projects_cmd=None, usernames_cmd=None, autofix=False,
               logging=False):

    # Set default arguments
    if not projects_cmd:
        projects_cmd = os.environ['PROJECT']
    projects = projects_cmd.split(',')

    if not usernames_cmd:
        usernames_cmd = pwd.getpwuid(os.getuid()).pw_name
    usernames = usernames_cmd.split(',')

    # Verbose output if no logging
    verbose = not logging

    for proj in projects:
        projectpath = os.path.join(shortpath, proj)

        for user in usernames:
            userpath = os.path.join(projectpath, user)

            audit_log = {}

            mesg_log = file_audit(userpath, proj, d_policy,
                                       verbose, autofix)
            if mesg_log:
                audit_log[userpath] = mesg_log

            for root, dirs, files in os.walk(userpath):

                # Audit the directories
                for d in dirs:
                    d_path = os.path.join(root, d)

                    mesg_log = file_audit(d_path, proj, d_policy,
                                               verbose, autofix)
                    if mesg_log:
                        audit_log[d_path] = mesg_log

                # Audit the files
                for f in files:
                    f_path = os.path.join(root, f)

                    mesg_log = file_audit(f_path, proj, f_policy,
                                               verbose, autofix)
                    if mesg_log:
                        audit_log[f_path] = mesg_log

            # An empty log means no problems were detected
            if not audit_log:
                report('{} passed the audit'.format(userpath))
            elif logging:
                with open('short_{}.log'.format(user), 'w') as out:
                    out = yaml.dump(audit_log, out, default_flow_style=False)


#---
def file_audit(f_path, f_proj, f_policy, verbose, autofix):

    project_gid = grp.getgrnam(f_proj).gr_gid
    mesg_log = []

    f_stat = os.lstat(f_path)
    f_uid = f_stat.st_uid
    f_gid = f_stat.st_gid

    # Audit disk usage

    if not f_stat.st_ino in hardlink_inodes:
        f_user = pwd.getpwuid(f_uid).pw_name
        user_disk_usage[f_user] += f_stat.st_blocks

        f_group = grp.getgrgid(f_gid).gr_name
        group_disk_usage[f_group] += f_stat.st_blocks

        # TODO: Maybe always check this, in case directories are checked twice
        if f_stat.st_nlink > 1:
            hardlink_inodes.add(f_stat.st_ino)

    # Check permission group
    if not f_gid == project_gid:
        mesg = 'change group to {}'.format(f_proj)
        mesg_log.append(mesg)

        if verbose:
            report('{}: {}'.format(f_path, mesg))

        if autofix:
            os.lchown(f_path, -1, project_gid)

    # Audit permissions

    f_mode = f_stat.st_mode

    if stat.S_ISLNK(f_mode):
        # Skip permission check
        return mesg_log

    new_mode = f_mode

    for enable, p_mode, mesg in f_policy:
        mode_audit = not (new_mode & p_mode) if enable else new_mode & p_mode

        if mode_audit:
            new_mode = (new_mode | p_mode) if enable else (new_mode & ~p_mode)
            mesg_log.append(mesg)

            if verbose:
                report('{}: {}'.format(f_path, mesg))

    if autofix and new_mode != f_mode:
        os.chmod(f_path, new_mode)

    return mesg_log


#---
def report(mesg):
    print('{}: {}'.format(scriptname, mesg))


#---
def shortaudit_parse():

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('-P', '--project',
                        action='store',
                        dest='projects',
                        default=None,
                        help='Project to audit')

    parser.add_argument('-u', '--users',
                        action='store',
                        dest='users',
                        default=None,
                        help='Users to audit (comma-separated)')

    parser.add_argument('-f', '--fix',
                        action='store_true',
                        dest='autofix',
                        help='Automatically fix any permission issues')

    parser.add_argument('-l', '--log',
                        action='store_true',
                        dest='logging',
                        help='Output permission issues to a log file')

    args = parser.parse_args()

    return args.projects, args.users, args.autofix, args.logging


#---
if __name__ == '__main__':

    # Parse input
    args = shortaudit_parse()

    # Prompt for group
    shortaudit(*args)
