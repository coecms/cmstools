#!/usr/bin/env python
# coding: utf-8
"""
Check that files in /short follow the current permissions policy
Contact: Marshall Ward <marshall.ward@gmail.com>
"""

import argparse
from collections import defaultdict
import errno
import grp
import os
import pwd
import stat
import sys

import yaml

shortpath = '/short'
scriptname = 'shortaudit'

#---
# TODO: Break this up into smaller functions
def shortaudit(projects_cmd=None, usernames_cmd=None, autofix=False,
               logging=False):

    # Set default arguments
    if not projects_cmd:
        projects_cmd = os.environ['PROJECT']
    projects = projects_cmd.split(',')

    if not usernames_cmd:
        usernames_cmd = pwd.getpwuid(os.getuid()).pw_name
    usernames = usernames_cmd.split(',')

    # Verbose output if no logging
    verbose = not logging

    # Validate users and projects, and get OS metadata
    try:
        groups = {p: grp.getgrnam(p) for p in projects}
    except KeyError as ec:
        report(ec.message)
        sys.exit(1)

    try:
        # NOTE: I don't ever use this
        users = {u: pwd.getpwnam(u) for u in usernames}
    except KeyError as ec:
        report(ec.message)
        sys.exit(1)

    # Initialize disk usage logs
    user_disk_usage = defaultdict(int)
    group_disk_usage = defaultdict(int)
    hardlink_inodes = set()

    # TODO: Test for directories!
    for proj in projects:

        projectpath = os.path.join(shortpath, proj)

        for user in usernames:

            userpath = os.path.join(projectpath, user)

            audit_log = defaultdict(list)

            # TODO: Why is os.walk so slow?
            for root, dirs, files in os.walk(userpath):

                # Audit the directories
                for d in dirs:
                    d_path = os.path.join(root, d)
                    d_stat = os.lstat(d_path)

                    # Audit disk usage

                    d_uid = d_stat.st_uid
                    d_user = pwd.getpwuid(d_uid).pw_name
                    user_disk_usage[d_user] += d_stat.st_blocks

                    d_gid = d_stat.st_gid
                    d_group = grp.getgrgid(d_gid).gr_name
                    group_disk_usage[d_group] += d_stat.st_blocks

                    # Check permission group
                    # NOTE: This will disable the setgid bit
                    d_gid = d_stat.st_gid
                    if not d_gid == groups[proj].gr_gid:
                        mesg = 'change group to {}'.format(proj)
                        audit_log[d_path].append(mesg)

                        if verbose:
                            report('{}: {}'.format(d_path, mesg))

                        if autofix:
                            os.lchown(f_path, -1, groups[proj].gr_gid)

                    # Audit permissions

                    d_mode = d_stat.st_mode
                    new_mode = d_mode
                    dat_flag = False

                    # Audit setgid permissions
                    # TODO: I guess I could consolidate these
                    if not d_mode & stat.S_ISGID:
                        mesg = 'enable setgid (g+s)'
                        audit_log[d_path].append(mesg)

                        new_mode = new_mode | stat.S_ISGID
                        dat_flag = True

                        if verbose:
                            report('{}: {}'.format(d_path, mesg))

                    # Audit group access
                    if not d_mode & (stat.S_IRGRP | stat.S_IRGRP):
                        mesg = 'enable group access (g+rx)'
                        audit_log[d_path].append(mesg)

                        new_mode = new_mode | (stat.S_IRGRP | stat.S_IRGRP)

                        if verbose:
                            report('{}: {}'.format(d_path, mesg))

                    # Audit public access
                    if d_mode & stat.S_IWOTH:
                        mesg = 'disable public write access (o-w)'
                        audit_log[d_path].append(mesg)

                        new_mode = new_mode & ~stat.S_IWOTH

                        if verbose:
                            report('{}: {}'.format(d_path, mesg))

                    if autofix and new_mode != d_mode:
                        os.chmod(d_path, new_mode)


                # Audit the files
                for f in files:
                    f_path = os.path.join(root, f)
                    f_stat = os.lstat(f_path)

                    # Get file disk usage
                    if not f_stat.st_ino in hardlink_inodes:
                        f_uid = f_stat.st_uid
                        f_user = pwd.getpwuid(f_uid).pw_name
                        user_disk_usage[f_user] += f_stat.st_blocks

                        f_gid = f_stat.st_gid
                        f_group = grp.getgrgid(f_gid).gr_name
                        group_disk_usage[f_group] += f_stat.st_blocks

                        if f_stat.st_nlink > 1:
                            hardlink_inodes.add(f_stat.st_ino)

                    # Check file group
                    f_gid = f_stat.st_gid
                    if not f_gid == groups[proj].gr_gid:
                        mesg = 'change group to {}'.format(proj)
                        audit_log[f_path].append(mesg)
                        if verbose:
                            report('{}: {}'.format(f_path, mesg))

                        if autofix:
                            os.lchown(f_path, -1, groups[proj].gr_gid)

                    # Audit permissions

                    f_mode = f_stat.st_mode
                    if not stat.S_ISLNK(f_mode):

                        new_mode = f_mode

                        # Audit group access
                        if not f_mode & (stat.S_IRGRP | stat.S_IRGRP):
                            mesg = 'enable group access (g+r)'
                            audit_log[f_path].append(mesg)

                            new_mode = new_mode | (stat.S_IRGRP | stat.S_IRGRP)

                            if verbose:
                                report('{}: {}'.format(f_path, mesg))

                        # Audit public access
                        if f_mode & stat.S_IWOTH:
                            mesg = 'disable public write access (o-w)'
                            audit_log[f_path].append(mesg)

                            new_mode = new_mode & ~stat.S_IWOTH

                            if verbose:
                                report('{}: {}'.format(f_path, mesg))

                        if autofix and new_mode != f_mode:
                            os.chmod(f_path, new_mode)

            # For completeness, append the directory disk usage
            base_stat = os.lstat(userpath)
            user_disk_usage[user] += base_stat.st_blocks

            # An empty log means no problems were detected
            if not audit_log:
                report('{} passed the audit'.format(userpath))
            else:
                if logging:
                    with open('short_{}.log'.format(user), 'w') as out:
                        out = yaml.dump(dict(audit_log), out,
                                        default_flow_style=False)


#---
def report(mesg):
    return '{}: {}'.format(scriptname, mesg)


#---
def shortaudit_parse():

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('-P', '--project',
                        action='store',
                        dest='projects',
                        default=None,
                        help='Project to audit')

    parser.add_argument('-u', '--users',
                        action='store',
                        dest='users',
                        default=None,
                        help='Users to audit (comma-separated)')

    parser.add_argument('-f', '--fix',
                        action='store_true',
                        dest='autofix',
                        help='Automatically fix any permission issues')

    parser.add_argument('-l', '--log',
                        action='store_true',
                        dest='logging',
                        help='Output permission issues to a log file')

    args = parser.parse_args()

    return args.projects, args.users, args.autofix, args.logging


#---
if __name__ == '__main__':

    # Parse input
    args = shortaudit_parse()

    # Prompt for group
    shortaudit(*args)
